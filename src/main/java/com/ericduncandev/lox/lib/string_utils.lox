export class StringUtils {
    // Basic operations
    class length(str) {
        var count = 0;
        while (str[count] != nil) {
            count = count + 1;
        }
        return count;
    }

    class isEmpty(str) {
        return str == "";
    }

    class charAt(str, index) {
        if (index < 0 or index >= StringUtils.length(str)) {
            return nil;
        }
        return str[index];
    }

    // Comparison
    class equals(str1, str2) {
        if (StringUtils.length(str1) != StringUtils.length(str2)) {
            return false;
        }
        var i = 0;
        while (str1[i] != nil) {
            if (str1[i] != str2[i]) {
                return false;
            }
            i = i + 1;
        }
        return true;
    }

    class compareTo(str1, str2) {
        var i = 0;
        while (str1[i] != nil and str2[i] != nil) {
            if (str1[i] < str2[i]) return -1;
            if (str1[i] > str2[i]) return 1;
            i = i + 1;
        }
        if (StringUtils.length(str1) < StringUtils.length(str2)) return -1;
        if (StringUtils.length(str1) > StringUtils.length(str2)) return 1;
        return 0;
    }

    // Searching
    class indexOf(str, substr) {
        var strLen = StringUtils.length(str);
        var subLen = StringUtils.length(substr);
        for (var i = 0; i <= strLen - subLen; i = i + 1) {
            var j;
            for (j = 0; j < subLen; j = j + 1) {
                if (str[i + j] != substr[j]) {
                    break;
                }
            }
            if (j == subLen) {
                return i;
            }
        }
        return -1;
    }

    class contains(str, substr) {
        return StringUtils.indexOf(str, substr) != -1;
    }

    class startsWith(str, prefix) {
        return StringUtils.indexOf(str, prefix) == 0;
    }

    class endsWith(str, suffix) {
        var strLen = StringUtils.length(str);
        var suffixLen = StringUtils.length(suffix);
        if (suffixLen > strLen) {
            return false;
        }
        return StringUtils.equals(StringUtils.substring(str, strLen - suffixLen, strLen), suffix);
    }

    // Extraction
    class substring(str, startIndex, endIndex) {
        endIndex = endIndex or StringUtils.length(str);
        var result = "";
        for (var i = startIndex; i < endIndex and str[i] != nil; i = i + 1) {
            result = result + str[i];
        }
        return result;
    }

    // Modification
    class concat(str1, str2) {
        return str1 + str2;
    }

    class repeat(str, times) {
        var result = "";
        for (var i = 0; i < times; i = i + 1) {
            result = result + str;
        }
        return result;
    }

    class replace(str, oldSubstr, newSubstr) {
        var result = "";
        var i = 0;
        while (i < StringUtils.length(str)) {
            if (StringUtils.startsWith(StringUtils.substring(str, i), oldSubstr)) {
                result = result + newSubstr;
                i = i + StringUtils.length(oldSubstr);
            } else {
                result = result + str[i];
                i = i + 1;
            }
        }
        return result;
    }

    // Trimming
    class trim(str) {
        var start = 0;
        var end = StringUtils.length(str) - 1;
        while (start <= end and str[start] == " ") {
            start = start + 1;
        }
        while (end >= start and str[end] == " ") {
            end = end - 1;
        }
        return StringUtils.substring(str, start, end + 1);
    }

    // Case conversion
    class toLowerCase(str) {
        var result = "";
        for (var i = 0; str[i] != nil; i = i + 1) {
            var ch = str[i];
            if (ch >= "A" and ch <= "Z") {
                result = result + StringUtils.fromCharCode(StringUtils.charCodeAt(ch) + 32);
            } else {
                result = result + ch;
            }
        }
        return result;
    }

    class toUpperCase(str) {
        var result = "";
        for (var i = 0; str[i] != nil; i = i + 1) {
            var ch = str[i];
            if (ch >= "a" and ch <= "z") {
                result = result + StringUtils.fromCharCode(StringUtils.charCodeAt(ch) - 32);
            } else {
                result = result + ch;
            }
        }
        return result;
    }

    // Utility functions
    class charCodeAt(ch) {
        // This would need to be implemented natively
        return StringUtils.nativeCharCodeAt(ch);
    }

    class fromCharCode(code) {
        // This would need to be implemented natively
        return StringUtils.nativeFromCharCode(code);
    }

    class nativeCharCodeAt(ch) {
        // Native implementation
        print(ch);
    }

    class nativeFromCharCode(code) {
        // Native implementation
        print(code);
    }

    // Additional utility functions
    class reverse(str) {
        var result = "";
        for (var i = StringUtils.length(str) - 1; i >= 0; i = i - 1) {
            result = result + str[i];
        }
        return result;
    }

    class isNumeric(str) {
        var i = 0;
        var dotSeen = false;
        if (str[0] == "-" or str[0] == "+") {
            i = 1;
        }
        while (str[i] != nil) {
            if (str[i] == ".") {
                if (dotSeen) return false;
                dotSeen = true;
            } else if (str[i] < "0" or str[i] > "9") {
                return false;
            }
            i = i + 1;
        }
        return true;
    }
}